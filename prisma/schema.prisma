generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//* USER

model User {
  id     String  @id @default(cuid())
  nome   String
  email  String  @unique
  roles  Role[]  @default([COLAB])
  senha  String
  avatar String?

  // Relacionamentos
  atendimentoCriado      Atendimento[] @relation("atendimentoCriado")
  atendimentoAtualizado  Atendimento[] @relation("atendimentoAtualizado")
  clienteCriado          Cliente[]     @relation("clienteCriado")
  clienteAtualizado      Cliente[]     @relation("clienteAtualizado")
  responsavelAtendimento Atendimento[] @relation("responsavelAtendimento")
}

enum Role {
  ADMIN
  DEV
  COLAB
  FINANCE
}

//* ATENDIMENTO

model Atendimento {
  id     String @id @default(cuid())
  ordem  Int    @unique
  titulo String @default("titulo")

  descricao      String?
  prazo          DateTime?
  extra          Boolean?
  situacao       SituacaoAtendimento[]
  proximaAtuacao DateTime?

  criadoEm     DateTime? @default(now())
  atualizadoEm DateTime?

  // Relacionamentos
  cliente       Cliente?             @relation("atendimentoCliente", fields: [clienteId], references: [id])
  responsavel   User[]               @relation("responsavelAtendimento")
  evolucao      EvolucaoAtendimento?
  criadoPor     User?                @relation("atendimentoCriado", fields: [userCriouId], references: [id])
  atualizadoPor User?                @relation("atendimentoAtualizado", fields: [userAtualizouId], references: [id])

  // Chave
  clienteId       String?
  userCriouId     String?
  userAtualizouId String?
}

enum SituacaoAtendimento {
  ENCERRADO
  ANDAMENTO
}

model Cliente {
  id          String       @id @default(cuid())
  tipoCliente TipoCliente?
  razaoNome   String
  nome        String?
  cnpjCpf     String?      @unique

  //Pessoa física
  estadoCivilPf String?
  rgPf          String?
  dnPf          DateTime?

  //Pessoa jurídica
  logradouroPj       String?
  numeroLogradouroPj String?
  bairroPj           String?
  complementoPj      String?
  cepPj              String?
  cidadePj           String?
  ufPj               String?
  telefonePj         String?

  //Responsável
  nomeResponsavel             String?
  cpfResponsavel              String?
  estadoCivilResponsavel      String?
  rgResponsavel               String?
  dnResponsavel               DateTime?
  logradouroResponsavel       String?
  numeroLogradouroResponsavel String?
  bairroResponsavel           String?
  cepResponsavel              String?
  cidadeResponsavel           String?
  ufResponsavel               String?
  telefoneResponsavel         String?

  //Comum
  email         String?
  codigoSimples String?
  codigoEcac    String?
  pasta         String?

  criadoEm     DateTime? @default(now())
  atualizadoEm DateTime?

  // Relacionamentos
  criadoPor          User?         @relation("clienteCriado", fields: [userCriouId], references: [id])
  atualizadoPor      User?         @relation("clienteAtualizado", fields: [userAtualizouId], references: [id])
  atendimentoCliente Atendimento[] @relation("atendimentoCliente")

  // Chave
  userCriouId     String?
  userAtualizouId String?
}

enum TipoCliente {
  PFISICA
  PJURIDICA
}

model EvolucaoAtendimento {
  id    String @id @default(cuid())
  ordem Int

  // Relacionamentos
  eventos     EventoEvolucaoAtendimento[]
  atendimento Atendimento                 @relation(fields: [atendimentoId], references: [id])

  // Chave
  atendimentoId String @unique
}

model EventoEvolucaoAtendimento {
  id         String                            @id @default(cuid())
  descricao  String
  situacao   SituacaoEventoEvolucaoAtendimento
  dataEvento DateTime

  // Relacionamentos
  evolucaoAtendimento EvolucaoAtendimento? @relation(fields: [evolucaoAtendimentoId], references: [id])

  // Chave
  evolucaoAtendimentoId String?
}

enum SituacaoEventoEvolucaoAtendimento {
  CONCLUIDO
  ANDAMENTO
}

//* TRANSPORTE

model Transporte {
  id              Int       @id @default(autoincrement())
  notas           Int[]
  cte             Int?
  uf_origem       String?
  cidade_origem   String?
  uf_destino      String?
  cidade_destino  String?
  peso            Decimal?
  val_tonelada    Decimal?
  val_cte         Decimal?
  reducao_bc_icms Decimal?
  aliquota_icms   Decimal?
  emissao_cte     DateTime?

  criadoEm     DateTime? @default(now())
  atualizadoEm DateTime?

  // Relacionamentos
  cteComplementar CteComplementar? // 1 para 1
  motorista       Motorista?       @relation(fields: [motoristaId], references: [id])
  tomador         Tomador?         @relation("transporteTomador", fields: [tomadorId], references: [id])
  empresa         Empresa          @relation("transporteEmpresa", fields: [empresaId], references: [id])

  // Chave
  motoristaId Int?
  empresaId   Int
  tomadorId   Int?
}

model CteComplementar {
  id              Int       @id @default(autoincrement())
  cte             Int?
  peso            Decimal?
  val_tonelada    Decimal?
  val_cte         Decimal
  reducao_bc_icms Decimal?
  aliquota_icms   Decimal?
  emissao_cte     DateTime?

  criadoEm     DateTime? @default(now())
  atualizadoEm DateTime?

  // Relacionamentos
  transporte   Transporte @relation(fields: [transporteId], references: [id])
  // Chave
  transporteId Int        @unique
}

model Empresa {
  id        Int     @id @default(autoincrement())
  razaoNome String
  cnpjCpf   String? @unique

  // Relacionamentos
  motoristas        Motorista[]
  transporteEmpresa Transporte[] @relation("transporteEmpresa")
}

model Motorista {
  id   Int     @id @default(autoincrement())
  nome String
  cpf  String? @unique

  // Relacionamentos
  empresas    Empresa[]
  transportes Transporte[]
}

model Tomador {
  id        Int     @id @default(autoincrement())
  razaoNome String
  cnpjCpf   String? @unique

  // Relacionamentos
  transporteTomador Transporte[] @relation("transporteTomador")
}
